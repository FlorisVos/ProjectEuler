# problem 2:
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def ExpandFiboList(fibonacciList, upperBound):
    if fibonacciList == [0]: #basecase
        return [0,1]
    if(fibonacciList[len(fibonacciList) - 1] + fibonacciList[len(fibonacciList) -2] > upperBound):
        return fibonacciList
    fibonacciList.append(fibonacciList[len(fibonacciList) - 1] + fibonacciList[len(fibonacciList) -2])
    return ExpandFiboList(fibonacciList, upperBound)

def SumEvenNumbers(numbers):
    sum = 0
    for x in numbers:
        if(x%2 == 0):
            sum += x
    return sum

fibonacciList = ExpandFiboList([0, 1], 4000000)

answer = SumEvenNumbers(fibonacciList)

print(answer)

